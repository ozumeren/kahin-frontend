import { useEffect, useState } from 'react'
import toast from 'react-hot-toast'
import { useNewTrades, useMyOrderEvents, useBalanceUpdates } from '../hooks/useWebSocket'
import { useAuth } from '../context/AuthContext'

/**
 * WebSocket Notifications Component
 * 
 * Bu component yeni WebSocket mesajlarƒ±nƒ± dinler ve kullanƒ±cƒ±ya bildirim g√∂sterir:
 * - new_trade: Yeni i≈ülem ger√ßekle≈ütiƒüinde
 * - my_order_filled: Kullanƒ±cƒ±nƒ±n emri e≈üle≈ütiƒüinde
 * - my_order_cancelled: Kullanƒ±cƒ±nƒ±n emri iptal edildiƒüinde
 * - balance_updated: Kullanƒ±cƒ±nƒ±n bakiyesi g√ºncellendiƒüinde
 */
export default function WebSocketNotifications({ marketId = null }) {
  const { user, setUser } = useAuth()
  const [recentTrades, setRecentTrades] = useState([])

  // Yeni trade'leri dinle
  useNewTrades(marketId, (trade) => {
    console.log('üÜï Yeni trade:', trade)
    
    // Son 5 trade'i sakla
    setRecentTrades(prev => [trade, ...prev].slice(0, 5))
    
    // Eƒüer kullanƒ±cƒ± bu trade'de yer alƒ±yorsa bildirim g√∂ster
    if (user && (trade.buyerId === user.id || trade.sellerId === user.id)) {
      const isBuyer = trade.buyerId === user.id
      toast.success(
        `Trade ger√ßekle≈üti! ${trade.quantity} adet @ ${trade.price} TL (${isBuyer ? 'Aldƒ±nƒ±z' : 'Sattƒ±nƒ±z'})`
      )
    }
  })

  // Ki≈üisel emir olaylarƒ±nƒ± dinle
  useMyOrderEvents(
    // onOrderFilled
    (orderData) => {
      console.log('‚úÖ Emir e≈üle≈üti:', orderData)
      
      const status = orderData.status === 'FILLED' ? 'Tamamen' : 'Kƒ±smen'
      const outcome = orderData.outcome ? 'YES' : 'NO'
      
      toast.success(
        `${status} e≈üle≈üti! ${orderData.orderType} ${orderData.filledQuantity} ${outcome} @ ${orderData.avgFillPrice} TL`,
        { duration: 5000 }
      )
    },
    // onOrderCancelled
    (orderData) => {
      console.log('‚ùå Emir iptal edildi:', orderData)
      
      const outcome = orderData.outcome ? 'YES' : 'NO'
      let reason = 'ƒ∞ptal edildi'
      
      if (orderData.reason === 'market_resolved') {
        reason = 'Pazar sonu√ßlandƒ±'
      } else if (orderData.reason === 'market_closed') {
        reason = 'Pazar kapandƒ±'
      } else if (orderData.reason === 'user_cancelled') {
        reason = 'ƒ∞ptal ettiniz'
      }
      
      let refundMsg = ''
      if (orderData.refundType === 'balance' && orderData.refundAmount > 0) {
        refundMsg = ` ${orderData.refundAmount} TL iade edildi.`
      } else if (orderData.refundType === 'shares') {
        refundMsg = ` ${orderData.quantity} ${outcome} hisse iade edildi.`
      }
      
      toast(
        `${reason}: ${orderData.orderType} ${orderData.quantity} ${outcome} @ ${orderData.price} TL${refundMsg}`,
        { duration: 7000, icon: '‚ÑπÔ∏è' }
      )
    }
  )

  // Bakiye g√ºncellemelerini dinle
  useBalanceUpdates((newBalance) => {
    console.log('üí∞ Bakiye g√ºncellendi:', newBalance)
    
    // AuthContext'teki user'ƒ± g√ºncelle
    if (user) {
      setUser(prevUser => ({
        ...prevUser,
        balance: newBalance
      }))
    }
  })

  // Bu component g√∂rsel bir ≈üey render etmez, sadece bildirimleri y√∂netir
  return null
}
